dados = [1, {"key": "valueÂ¨"}, True]
print(dados)
[1, {'key': 'valueÂ¨'}, True]


class Cor:
    icon = "â¬œ"

class Amarelo(Cor):
    icon = "ðŸŸ¨"


class Azul(Cor):
    icon = "ðŸŸ¦"


class Vermelho(Cor):
    icon = "ðŸŸ¥"


print("Cores primÃ¡rias")
print(Amarelo())
print(Azul())
print(Vermelho())
<__main__.Amarelo object at 0x7f677c9a3fd0>
<__main__.Azul object at 0x7f677c9a3fd0>
<__main__.Vermelho object at 0x7f677c9a3fd0>



class Cor:
    def __str__(self):
        return self.icon

...
print("Cores primÃ¡rias")
print(Amarelo())
print(Azul())
print(Vermelho())
ðŸŸ¨
ðŸŸ¦
ðŸŸ¥


"Bruno" + "Rocha"
6 + 7
42.1 + 47.9
True + True


class Cor:
    def __str__(self):
        return self.icon

    def __add__(self, other):
        mixtable = [
            ((Amarelo, Vermelho), Laranja),
            ((Azul, Amarelo), Verde),
            ((Vermelho, Azul), Violeta),
        ]
        for mix, result in mixtable:
            if isinstance(self, mix) and isinstance(other, mix):
                return result()

class Amarelo(Cor):
    icon = "ðŸŸ¨"


class Azul(Cor):
    icon = "ðŸŸ¦"


class Vermelho(Cor):
    icon = "ðŸŸ¥"


class Laranja(Cor):
    icon = "ðŸŸ§"


class Verde(Cor):
    icon = "ðŸŸ©"


class Violeta(Cor):
    icon = "ðŸŸª"


print("Cores secundÃ¡rias")
print(Amarelo() + Vermelho())
print(Azul() + Amarelo())
print(Vermelho() + Azul())
ðŸŸ§
ðŸŸ©
ðŸŸª


nome = "Bruno"
for letra in nome:
    print(letra)
B
r
u
n
o



class Paleta:
    def __init__(self, *cores):
        self._cores = cores

    def __iter__(self):
        return iter([cor.icon for cor in self._cores])


print("rgb")
rgb = Paleta(Vermelho(), Verde(), Azul())
for cor in rgb:
    print(cor, end="")
rgb
ðŸŸ¥ðŸŸ©ðŸŸ¦


numeros = [1, 2, 3]
print(3 in numeros)
True



class Paleta:
    def __init__(self, *cores):
        self._cores = cores

    def __contains__(self, item):
        return item in [cor.icon for cor in self._cores]


print("red in rgb?")
rgb = Paleta(Vermelho(), Verde(), Azul())
print("ðŸŸ¥" in rgb)
True



nome = "Bruno"
print(len(nome))
5



class Paleta:
    def __init__(self, *cores):
        self._cores = cores

    def __len__(self):
        return len(self._cores)


print("rgb size")
rgb = Paleta(Vermelho(), Verde(), Azul())
print(len(rgb))
3


numeros = [1, 2, 3]
len(numeros)  # sized
3 in numeros  # container
for numero in numeros:  # Iterable
    print(numero)


    class Paleta:
    def __init__(self, *cores):
        self._cores = cores

    def __len__(self):
        return len(self._cores)

    def __contains__(self, item):
        return item in [cor.icon for cor in self._cores]

    def __iter__(self):
        return iter([cor.icon for cor in self._cores])



        class Paleta:
    def __init__(self, *cores):
        self._cores = cores

    def __getitem__(self, item):
        if isinstance(item, (int, slice)):
            return self._cores[item]
        elif isinstance(item, str):
            for cor in self._cores:
                if cor.__class__.__name__.lower() == item.lower():
                    return cor

rgb = Paleta(Vermelho(), Verde(), Azul())
print(rgb[0])
print(rgb["azul"])
ðŸŸ¥
ðŸŸ¦


class Thing:
    ...

thing = Thing()
print(thing)  # __repr__ Representable
thing == 1  # __eq__ Equality Comparable


__new__              # Construtor chamado antes de criar a intÃ¢ncia
__init__             # Inicializador chamado apÃ³s a instÃ¢ncia Ã© criada
__init_subclass__    # Inicializador de subclasses
__repr__             # Imprime a representaÃ§Ã£o em string
__str__              # chama __repr__ por padrÃ£o
__setattr__          # executado sempre que atribuimos com obj.name = value
__getattr__          # executado quando acessamos obj.name
__delattr__          # executado quando apagamos com `del obj.name`
__getattribute__     # executado quando um atributo nÃ£o Ã© encontrado
__dir__              # lista todos os atributos e mÃ©todos